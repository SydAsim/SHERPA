import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { toast } from '@/components/ui/use-toast';

const VulnerabilityReportUpload = () => {
  const [file, setFile] = useState(null);
  const [analysis, setAnalysis] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
    setAnalysis(null);
  };

  const handleAnalyze = () => {
    if (!file) {
      toast({
        title: "No file selected",
        description: "Please select a vulnerability report to analyze.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    // Mock AI analysis
    setTimeout(() => {
      const fileType = file.name.split('.').pop();
      let mockAnalysis;

      switch (fileType) {
        case 'json':
          mockAnalysis = {
            fileType: 'JSON',
            summary: 'The JSON report indicates a high number of medium-severity vulnerabilities.',
            recommendations: [
              'Prioritize patching of SQL injection vulnerabilities.',
              'Review access controls for all database-related services.',
            ],
          };
          break;
        case 'xml':
          mockAnalysis = {
            fileType: 'XML',
            summary: 'The XML report highlights several critical configuration issues.',
            recommendations: [
              'Update server configurations to disable legacy protocols.',
              'Implement stricter firewall rules for external-facing services.',
            ],
          };
          break;
        case 'csv':
          mockAnalysis = {
            fileType: 'CSV',
            summary: 'The CSV report contains a large dataset of low-severity findings.',
            recommendations: [
              'Automate the patching of low-severity vulnerabilities.',
              'Conduct a follow-up scan to verify the patches.',
            ],
          };
          break;
        default:
          mockAnalysis = {
            fileType: 'Unsupported',
            summary: 'This file type is not supported for automated analysis.',
            recommendations: [
              'Please upload a supported file type (e.g., JSON, XML, CSV).',
            ],
          };
      }

      setAnalysis(mockAnalysis);
      setIsLoading(false);
    }, 2000);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability Report Analysis</CardTitle>
        <CardDescription>
          Upload a vulnerability report to get AI-powered insights and recommendations.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex w-full max-w-sm items-center space-x-2">
            <Input type="file" onChange={handleFileChange} />
            <Button onClick={handleAnalyze} disabled={isLoading}>
              {isLoading ? 'Analyzing...' : 'Analyze'}
            </Button>
          </div>

          {analysis && (
            <div className="space-y-4 pt-4">
              <h3 className="text-lg font-semibold">Analysis Results ({analysis.fileType})</h3>
              <p className="text-sm text-muted-foreground">{analysis.summary}</p>
              <ul className="space-y-2">
                {analysis.recommendations.map((rec, index) => (
                  <li key={index} className="flex items-start gap-3">
                    <div className="w-2 h-2 rounded-full bg-primary mt-2" />
                    <p className="text-sm">{rec}</p>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityReportUpload;
